#!/bin/bash

set -e -o pipefail

function get_os {
  case "$(uname -s)" in
  Darwin*) echo "macos" ;;
  Linux*) echo "linux" ;;
  *)
    echo "Unsupported OS"
    exit 1
    ;;
  esac
}

function get_arch {
  case "$(uname -m)" in
  aarch64 | arm64) echo "arm64" ;;
  i386 | i686) echo "i386" ;;
  x86_64) echo "amd64" ;;
  *)
    echo "Unsupported architecture"
    exit 1
    ;;
  esac
}

function verify_checksum {
  version=${1:?ERROR = value of version argument is not set}
  download_dir=${2:?ERROR = value of download_dir argument is not set}

  if ! [[ $version == 1.7* ]]; then
    echo "INFO: skipping checksum verification for jq version ${version}"
    return
  fi

  echo "INFO: downloading checksum from ${url}"
  curl -L "https://github.com/jqlang/jq/releases/download/jq-$version/sha256sum.txt" --output "$download_dir/jq-$version-sha256sum.txt"
  cd "$download_dir"
  echo "INFO: Verifying checksum"
  sha256sum --quiet -c "$download_dir/jq-$version-sha256sum.txt" --ignore-missing
  checksum=$?
  rm -f "$download_dir/jq-$version-sha256sum.txt"
  cd - >/dev/null
  if [[ $checksum -ne 0 ]]; then
    echo "ERROR: checksum verification failed"
    exit 1
  fi
}

function install {
  install_type="$1"
  version="$2"
  install_path="$3"

  if [ "$install_type" = "ref" ]; then
    echo "Unsupported installation type"
    exit 1
  fi

  if ! [[ ${version} =~ ^[0-9]+\.[0-9]+(\.[0-9]+(.*)?)?$ ]]; then
    echo "ERROR: unsupported version format ${version}"
    exit 1
  fi

  if [ "$TMPDIR" = "" ]; then
    tmp_download_dir=$(mktemp -d)
  else
    tmp_download_dir=${TMPDIR%/}
  fi

  os=$(get_os)
  arch=$(get_arch)

  # do some version mapping for the inconsistent jq release naming
  # 1.7.x
  #     linux-amd64, linux-arm64, linux-i386
  #     macos-amd64, macos-arm64
  # 1.5.0/1.6.0
  #     linux-32, linux-64
  #     osx-amd64
  # 1.3.0/1.4.0
  #     linux-x86, linux-x86_64
  #     osx-x86, osx-x86_64
  if [[ $version =~ 1\.[56](\.[0-9])? ]]; then
    case "$arch" in
    amd64) arch=64 ;;
    arm64)
      echo "ERROR: jq version ${version} does not support arm64 architecture"
      exit 1
      ;;
    i386) arch=32 ;;
    esac
    case "$os" in
    macos) os=osx arch=-amd64 ;;
    esac
    binary="jq-${os}${arch}"
  elif [[ $version =~ 1\.[34](\.[0-9])? ]]; then
    case "$arch" in
    amd64) arch=x86_64 ;;
    arm64)
      echo "ERROR: jq version ${version} does not support arm64 architecture"
      exit 1
      ;;
    i386) arch=x86 ;;
    esac
    case "$os" in
    macos) os=osx ;;
    esac
    binary="jq-$os-$arch"
  else
    binary="jq-$os-$arch"
  fi

  url=https://github.com/jqlang/jq/releases/download/jq-$version/$binary
  echo "INFO: downloading jq from ${url}"
  curl -fL "$url" --output "$tmp_download_dir/$binary"
  if command -v sha256sum >/dev/null; then
    verify_checksum "$version" "${tmp_download_dir}"
  else
    echo "WARNING: sha256sum not found, skipping checksum verification"
  fi

  mv "$tmp_download_dir/$binary" "$install_path/jq"
  chmod +x "$install_path/jq"
  echo "INFO: successfully installed jq version ${version}"
}

install "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
